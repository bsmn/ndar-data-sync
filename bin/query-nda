#!/usr/bin/env python

import csv
import io
import os
import sys
import json
import logging
import uuid

from deprecated import deprecated
import requests
import pandas
import boto3
import synapseclient
import ndasynapse

pandas.options.display.max_rows = None
pandas.options.display.max_columns = None
pandas.options.display.max_colwidth = 1000

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

def get_collection_submissions(auth, args, config=None):
    logger.debug("collectionids = {collection_id}".format(collection_id=args.collection_id))
    submissions = ndasynapse.nda.get_submissions(auth, collectionid=[str(x) for x in args.collection_id])
    submissions_processed = ndasynapse.nda.process_submissions(submissions)

    submissions_processed.to_csv(sys.stdout, index=False)

def get_submission(auth, args, config=None):
    submission = ndasynapse.nda.get_submission(auth, submissionid=args.submission_id)
    submissions_processed = ndasynapse.nda.process_submissions(submission)
    submissions_processed.to_csv(sys.stdout, index=False)

def get_submission_files(auth, args, config=None):
    submission = ndasynapse.nda.get_submission_files(auth, submissionid=args.submission_id)
    submissions_processed = ndasynapse.nda.process_submission_files(submission)
    submissions_processed.to_csv(sys.stdout, index=False)

def get_collection_submission_files(auth, args, config=None):
    submissions_obj = ndasynapse.nda.NDASubmission(config=config,
                                                   collection_id=args.collection_id)
    

    sub_files =  [s['processed_files'] for s in submissions_obj.submission_files] # pylint: disable:line-too-long
    submission_files_processed = pandas.concat(sub_files)
    submission_files_processed.to_csv(sys.stdout, index=False)


def get_experiments(auth, args, config=None):
    expts = ndasynapse.nda.get_experiments(auth,
                                           args.experiment_id)
    
    expts = ndasynapse.nda.process_experiments(expts)
    expts = expts.drop_duplicates()
    expts.to_csv(sys.stdout, index=False)

def get_samples(auth, args, config=None):
    samples_data = ndasynapse.nda.get_samples(auth=auth, guid=args.guid)
    samples_data_df = ndasynapse.nda.sample_data_files_to_df(samples_data)
    samples_data_df = ndasynapse.nda.process_samples(samples_data_df)
    samples_data_df.to_csv(sys.stdout, index=False)

def get_subjects(auth, args, config=None):
    data = ndasynapse.nda.get_subjects(auth=auth, guid=args.guid)
    data_df = ndasynapse.nda.subjects_to_df(data)
    data_df = ndasynapse.nda.process_subjects(data_df)
    data_df.to_csv(sys.stdout, index=False)

def get_collection_guids(auth, args, config=None):
    submissions = ndasynapse.nda.NDASubmission(config=config, 
                                               collection_id=args.collection_id)
    guids = submissions.get_guids()
    sys.stdout.write(guids)

def get_collection_manifests(auth, args, config=None):
    logger.warn("Information in the collection manifests may be out of date.")
    data_frames = []
    # associated_files_data_frames = []
    
    for collection_id in args.collection_id:
        submissions = ndasynapse.nda.NDASubmission(config=config, collection_id=collection_id)
        for submission in submissions.submission_files:
            logging.debug('GUIDs from submission {} in collection {}'.
                          format(submission['submission_id'],
                                 submission['collection_id']))
            for data_file in submission['files'].data_files:
                data_file_as_string = data_file['content'].decode('utf-8')
                if args.manifest_type in data_file_as_string:
                    data = pandas.read_csv(io.StringIO(data_file_as_string), skiprows=1)
                    data['collection_id'] = submission['collection_id']
                    data['submission_id'] = submission['submission_id']
                    data_frames.append(data)

            # associated_files = pandas.DataFrame.from_dict(submission['files'].associated_files)
            # associated_files['collection_id'] = submission['collection_id']
            # associated_files['submission_id'] = submission['submission_id']
            # associated_files_data_frames.append(associated_files)

    # if associated_files_data_frames:
    #     print(pandas.concat(associated_files_data_frames))

    if data_frames:
        pandas.concat(data_frames).to_csv(sys.stdout, index=False)
    
def main():

    import argparse
    import json
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true", default=False)
    parser.add_argument("--config", type=str, default=None)

    subparsers = parser.add_subparsers(help='sub-command help')

    parser_get_samples = subparsers.add_parser('get-samples', help='Get samples from NDA.')
    parser_get_samples.add_argument('--guid', type=str, help='NDA subject key (GUID).')
    parser_get_samples.set_defaults(func=get_samples)

    parser_get_subjects = subparsers.add_parser('get-subjects', help='Get subjects from NDA.')
    parser_get_subjects.add_argument('--guid', type=str, help='NDA subject key (GUID).')
    parser_get_subjects.set_defaults(func=get_subjects)

    parser_get_experiments = subparsers.add_parser('get-experiments', help='Get experiments from NDA.')
    parser_get_experiments.add_argument('--experiment_id', type=int, nargs="+", help='NDA experiment IDs.')
    parser_get_experiments.set_defaults(func=get_experiments)

    parser_get_submissions = subparsers.add_parser('get-collection-submissions', help='Get submissions in NDA collections.')
    parser_get_submissions.add_argument('--collection_id', type=int, nargs="+", help='NDA collection IDs.')
    parser_get_submissions.set_defaults(func=get_collection_submissions)

    parser_get_submission = subparsers.add_parser('get-submission', help='Get an NDA submission.')
    parser_get_submission.add_argument('--submission_id', type=int, help='NDA submission ID.')
    parser_get_submission.set_defaults(func=get_submission)

    parser_get_submission_files = subparsers.add_parser('get-submission-files', help='Get files for an NDA submission.')
    parser_get_submission_files.add_argument('--submission_id', type=int, help='NDA submission ID.')
    parser_get_submission_files.set_defaults(func=get_submission_files)

    parser_get_collection_submission_files = \
        subparsers.add_parser('get-collection-submission-files', 
                              help='Get all submission files in an NDA collection.')
    parser_get_collection_submission_files.add_argument('--collection_id', 
                                                        type=int, 
                                                        help='NDA collection IDs.')
    parser_get_collection_submission_files.set_defaults(func=get_collection_submission_files)

    parser_get_collection_guids = \
        subparsers.add_parser('get-collection-guids', 
                              help='Get all GUIDS used in an NDA collection.')
    parser_get_collection_guids.add_argument('--collection_id', 
                                             type=int, 
                                             help='NDA collection ID.')
    parser_get_collection_guids.set_defaults(func=get_collection_guids)

    parser_get_collection_manifest = subparsers.add_parser('get-collection-manifests', help='Get manifest files that were submitted in an NDA collection.')
    parser_get_collection_manifest.add_argument('--collection_id', type=int, nargs="+", help='NDA collection ID.')
    parser_get_collection_manifest.add_argument('--manifest_type', type=str,
                                                help='Which manifest type to get, one of "genomics_sample", "genomics_subject", or "nichd_btb".')
    parser_get_collection_manifest.set_defaults(func=get_collection_manifests)

    args = parser.parse_args()

    logger.info(args.config)
    
    config = json.load(open(args.config))
    auth = ndasynapse.nda.authenticate(config)
    logger.info(auth)
    
    args.func(auth, args, config=config['nda'])


if __name__ == "__main__":
    main()
